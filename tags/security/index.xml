<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on CC&#39;s Trip</title>
    <link>https://cctrip.github.io/tags/security/</link>
    <description>Recent content in security on CC&#39;s Trip</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 09 Nov 2020 17:55:28 +0800</lastBuildDate><atom:link href="https://cctrip.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入理解LVS</title>
      <link>https://cctrip.github.io/posts/deep_lvs/</link>
      <pubDate>Mon, 09 Nov 2020 17:55:28 +0800</pubDate>
      
      <guid>https://cctrip.github.io/posts/deep_lvs/</guid>
      <description>1. 介绍    接上一篇深入理解iptables，kubernetes service技术还用到ipvs技术，讲到ipvs，那就得说说LVS了，这篇我们来了解下LVS具体的实现机制。
 2. IPVS     IPVS（IP虚拟服务器）实现传输层负载均衡，通常称为第4层LAN交换。
 负载均衡器的概念可以看这篇文章，或者翻译版本。
大多数情况下，负载均衡器和代理这两个术语会被混用在一起，所谓的代理，简单来说，就是接收客户端的数据包再转发到对应的后端服务器上。
ipvs就在这样的软件，它依赖netfilter的功能来实现数据包的转发，我们还是先拉源码定义来看下。
ip_vs_core.c
static const struct nf_hook_ops ip_vs_ops4[] = { /* After packet filtering, change source only for VS/NAT */ { .hook	= ip_vs_reply4, .pf	= NFPROTO_IPV4, .hooknum	= NF_INET_LOCAL_IN, .priority	= NF_IP_PRI_NAT_SRC - 2, }, /* After packet filtering, forward packet through VS/DR, VS/TUN, * or VS/NAT(change destination), so that filtering rules can be * applied to IPVS.</description>
    </item>
    
    <item>
      <title>深入理解iptables</title>
      <link>https://cctrip.github.io/posts/deep_iptables/</link>
      <pubDate>Sat, 07 Nov 2020 17:55:28 +0800</pubDate>
      
      <guid>https://cctrip.github.io/posts/deep_iptables/</guid>
      <description>1. 介绍    最近在刚好在看Kubernetes的service相关内容，里面用到了iptables和ipvs技术，好久没看iptables了，快忘记了，刚好复习重新记忆一下。
讲iptables和ipvs，有个东西就一定得清楚，那就是netfilter
 2. netfilter     netfilter是一个数据包处理框架。
 netfilter具备以下几个功能：
 数据包过滤 网络地址(端口)转换 数据包日志记录 用户空间数据包排队 其他数据包处理功能  2.1 netfilter架构    netfilter 提供了 5 个 hook 点。包经过协议栈时会触发内核模块注册在这里的处理函数 。触发哪个 hook 取决于包的方向（是发送还是接收）、包的目的地址、以及包在上一个 hook 点是被丢弃还是拒绝等等。
下面几个 hook 是内核协议栈中已经定义好的：
 NF_IP_PRE_ROUTING: 接收到的包进入协议栈后立即触发此 hook，在进行任何路由判断 （将包发往哪里）之前 NF_IP_LOCAL_IN: 接收到的包经过路由判断，如果目的是本机，将触发此 hook NF_IP_FORWARD: 接收到的包经过路由判断，如果目的是其他机器，将触发此 hook NF_IP_LOCAL_OUT: 本机产生的准备发送的包，在进入协议栈后立即触发此 hook NF_IP_POST_ROUTING: 本机产生的准备发送的包或者转发的包，在经过路由判断之后， 将触发此 hook  注册处理函数时必须提供优先级，以便 hook 触发时能按照 优先级高低调用处理函数。这使得多个模块（或者同一内核模块的多个实例）可以在同一 hook 点注册，并且有确定的处理顺序。内核模块会依次被调用，每次返回一个结果给 netfilter 框架，提示该对这个包做以下几个操作之一：</description>
    </item>
    
    <item>
      <title>Linux PAM模块</title>
      <link>https://cctrip.github.io/posts/linux_pam/</link>
      <pubDate>Thu, 05 Sep 2019 17:55:28 +0800</pubDate>
      
      <guid>https://cctrip.github.io/posts/linux_pam/</guid>
      <description>概念    Linux-PAM（Pluggable Authentication Modules for Linux）是一套共享库,使本地系统管理员可以随意选择程序的认证方式。换句话说，不用(重新编写)重新编译一个包含PAM功能的应用程序，就可以改变它使用的认证机制，这种方式下，就算升级本地认证机制,也不用修改程序。
 工作机制    当应用程序希望与PAM交互以处理事件时，他们必须包括libpam，该libpam允许通过库提供的API进行通信。 当PAM看到必须处理的新事件时，它将查看/etc/pam.d中的相关配置文件，并确定在某些阶段必须使用哪些模块。
 /etc/pam.d配置文件介绍    配置文件语法
type control module-path module-arguments 配置文件分为四列
 第一列代表模块类型 第二列代表控制标记 第三列代表模块路径 第四列代表模块参数  类型    类型 是规则对应的管理组。它用于指定后续模块要与哪个管理组关联。
目前有四种类型:
  account
此模块类型执行基于非身份验证的帐户管理。 通常用于限制/允许对服务的访问，例如是否允许登录,是否达到最大用户数,或是root用户是否允许在这个终端登录等。
  auth
此模块为用户验证提供两方面服务。让应用程序提示用户输入密码或者其他标记，确认用户合法性；通过他的凭证许可权限，设定组成员关系或者其他优先权。
  password
此模块用于控制用户更改密码的全过程。
  session
此模块处理为用户提供服务之前/后需要做的些事情。包括：开启/关闭交换数据的信息，监视目录等，设置用户会话环境等。也就是说这是在系统正式进行服务提供之前的最后一道关口。
  如果在类型前加一个短横线 -，就表示如果找不到这个模块，导致无法被加载时，这一事件不会被记录在日志中。这个功能适用于那些认证时非必需的、安装时可能没被安装进系统的模块。
控制标记    流程栈（stack）
它是认证时执行步骤和规则的堆叠。在某个服务的配置文件中，它体现在了配置文件中的自上而下的执行顺序中。栈是可以被引用的，即在一个栈（或者流程）中嵌入另一个栈。
控制标记 规定如何处理PAM模块鉴别认证的结果，简而言之就是鉴别认证成功或者失败之后会发生什么事，如何进行控制。一般有两种形式，一种是比较常见的“关键字”方式，另一种则是用方括号（[]）包含的“value =action”方式。</description>
    </item>
    
    <item>
      <title>理解SSL/TLS协议</title>
      <link>https://cctrip.github.io/posts/tls/</link>
      <pubDate>Sun, 08 Jan 2017 17:55:28 +0800</pubDate>
      
      <guid>https://cctrip.github.io/posts/tls/</guid>
      <description>背景    早期我们在访问web时使用HTTP协议，该协议在传输数据时使用明文传输，明文传输带来了以下风险：
 信息窃听风险，第三方可以获取通信内容 信息篡改风险，第三方可以篡改通信内容 身份冒充风险，第三方可以冒充他人身份参与通信  为了解决明文传输所带来的风险，网景公司在1994年设计了SSL用于Web的安全传输协议，这是SSL的起源。IETF将SSL进行标准化，1999年公布了第一版TLS标准文件。随后又公布了 RFC 5246（2008年8月）与 RFC 6176 （2011年3月）。该协议在web中被广泛应用。
 SSL/TLS协议    TLS（Transport Layer Security，传输层安全协议），及其前身SSL（Secure Sockets Layer，安全套接层）是一种安全协议，目的是为互联网通信，提供安全及数据完整性保障。
TLS协议使用以下三种机制为信息通信提供安全传输：
 隐秘性，所有通信都通过加密后进行传播 身份认证，通过证书进行认证 可靠性，通过校验数据完整性维护一个可靠的安全连接   以TLS1.2为例说明TLS协议    TLS协议由TLS Record Protocol和TLS Handshake Protocol两层协议组成
TLS Record Protocol    该协议提供了连接安全的两个基本特性：
  连接私有
对称密码用于数据加密，这种对称加密是为每条连接唯一生成的并基于另一个人协商的秘密协议
  连接可靠
消息传输包括一条消息 使用密钥MAC进行完整性检查，安全哈希函数（例如， SHA-1等）用于MAC计算。
   TLS Handshake Protocol    该协议提供了连接安全的三个基本特性：
 可以使用非对称身份验证对等方的身份，或者 公钥，密码学等 共享密钥的协商是安全的 谈判可靠   一个TLS握手协议一般涉及以下步骤：</description>
    </item>
    
    <item>
      <title>WEB安全之CSP</title>
      <link>https://cctrip.github.io/posts/webcsp/</link>
      <pubDate>Fri, 20 May 2016 17:55:28 +0800</pubDate>
      
      <guid>https://cctrip.github.io/posts/webcsp/</guid>
      <description>概念    内容安全策略(Content-Security-Policy，CSP)：是一种web应用技术用于帮助缓解大部分类型的内容注入攻击，包括XSS攻击和数据注入等，这些攻击可实现数据窃取、网站破坏和作为恶意软件分发版本等行为。该策略可让网站管理员指定客户端允许加载的各类可信任资源。
 浏览器支持    统计来源：caniuse.com/contentsecuritypolicy &amp;amp; Mozilla
 指令参考    Content-Security-Policy 响应头的值可配置一个或多个，多个指令以分号;隔开。
   指令 示例 描述     default-src &amp;lsquo;self&amp;rsquo; cdn.example.com 默认配置，若其他指令没有配置，都以此配置的规则为准   script-src &amp;lsquo;self&amp;rsquo; js.example.com 定义允许加载的JavaScript来源   style-src &amp;lsquo;self&amp;rsquo; css.example.com 定义允许加载的样式表来源   img-src &amp;lsquo;self&amp;rsquo; img.example.com 定义允许加载的图片来源   connect-src &amp;lsquo;self&amp;rsquo; 适用于XMLHttpRequest(AJAX),WebSocket或EventSource，当为不允许的来源，浏览器返回一个400的状态码。   font-src font.example.com 定义允许加载的字体来源   object-src &amp;lsquo;self&amp;rsquo; 定义允许加载的插件来源.eg,&amp;lt;object&amp;gt;,&amp;lt;embed&amp;gt;或&amp;lt;applet&amp;gt;   media-src media.</description>
    </item>
    
  </channel>
</rss>
